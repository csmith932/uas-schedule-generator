/**
 * Copyright "TBD", Metron Aviation & CSSI.  All rights reserved.
 * 
 * This computer Software was developed with the sponsorship of the U.S. Government
 * under Contract No. DTFAWA-10-D-00033, which has a copyright license in accordance with AMS 3.5-13.(c)(1).
 */

package gov.faa.ang.swac.controller;

import gov.faa.ang.swac.common.Pair;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.Collections;
import java.util.List;

import org.apache.commons.io.FileUtils;

public class ProjectFixture {
	public static final String DEFAULT_SWAC_HOME_DIR = "target/test-classes/swac-home";
	public static final String DEFAULT_SWAC_WORK_DIR = "target/test-classes/swac-work";
	public static final String DEFAULT_SWAC_SCENARIO_NAME = "scenario";
	
	public static final File swacHomeDir = new File(DEFAULT_SWAC_HOME_DIR);
	public static final File swacConfigDir = new File(DEFAULT_SWAC_HOME_DIR+"/config");
	
	public static File swacWorkDir = new File(DEFAULT_SWAC_WORK_DIR);
	public static File swacScenarioDir = new File(swacWorkDir, "scenarios/scenario");
	public static File swacScenarioXmlFile = new File(swacScenarioDir, "scenario.xml");
	public static File swacScenarioPropertiesFile = new File(swacScenarioDir, "scenario.properties");
	
	public static void setSwacWorkDir(String dir) {
		swacWorkDir = new File(dir);
		swacScenarioDir = new File(swacWorkDir, "scenario");
		swacScenarioXmlFile = new File(swacScenarioDir, "scenario.xml");
		swacScenarioPropertiesFile = new File(swacScenarioDir, "scenario.properties");
	}
	
	public static void initSystemProperties(String logLevel, String validationLevel, String genKml)
	{
		try{
			String swacHomeUtf = URLDecoder.decode(swacHomeDir.getAbsolutePath(), StandardCharsets.UTF_8.name());
			String swacWorkUtf = URLDecoder.decode(swacWorkDir.getAbsolutePath(), StandardCharsets.UTF_8.name());
			
			System.setProperty(GlobalApplicationContext.SWAC_HOME_DIR_PROP_NAME, swacHomeUtf);
			System.setProperty(GlobalApplicationContext.SWAC_WORK_DIR_PROP_NAME, swacWorkUtf);
			
	        // TODO: XXX - Need to ensure this is thread/multi-process safe.
			System.setProperty("swac.log.level", logLevel);
	        // TODO: XXX - Need to ensure this is thread/multi-process safe.
			System.setProperty("swac.validation.level", validationLevel);
	        // TODO: XXX - Need to ensure this is thread/multi-process safe.
			System.setProperty("swac.gen.kml", genKml);
			
		}catch (UnsupportedEncodingException e){
			throw new RuntimeException("ProjectFixture can't decode a directory path.\n" + e.toString());
		}
	}
	
	public static void cleanWorkDir()
	{
		FileUtils.deleteQuietly(swacWorkDir);
	}
	
	public static void initWorkDir()
	{
		try {
			Bootstrap.main(new String[] { "" });
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void createScenario(String name, String baseDate, String forecastFiscalYear, String classifier) throws IOException
	{
		createScenario(name, baseDate, forecastFiscalYear, classifier, Collections.<Pair<String, String>>emptyList());
	}
	
	public static void createScenario(String scenarioName, 
									  String baseDate, 
									  String forecastFiscalYear, 
									  String classifier, 
									  List<Pair<String, String>> propertyRewrites) throws IOException
	{
		String testScenarioWorkDir	= DEFAULT_SWAC_WORK_DIR+"/scenarios/"+scenarioName;
        File _testScenarioWorkDir = new File(testScenarioWorkDir);
        _testScenarioWorkDir.mkdirs();
        
        //File testScenarioWorkLogDir = new File(testScenarioWorkDir + "/log");
        //testScenarioWorkLogDir.mkdirs();

        FileUtils.copyDirectory(swacScenarioDir,_testScenarioWorkDir);  //copies scenario.properties, log4j.xml, etc files to test scenario directory
		FileUtils.copyFile(swacScenarioXmlFile, new File(testScenarioWorkDir, scenarioName + ".xml"));
		
		//TODO: we need a better way to get this file.  It is originally generated by new-swac-create-scenario.sh script.
		FileUtils.copyFile(new File(swacConfigDir,"scenarioImports.csv"), new File(testScenarioWorkDir, "scenarioImports.csv"));
		
		String props = FileUtils.readFileToString(swacScenarioPropertiesFile);
		
		props = props.replace("BASE_DATE=BASE_DATE", "BASE_DATE=" + baseDate);
		props = props.replace("FORECAST_FISCAL_YEAR=FORECAST_FISCAL_YEAR", "FORECAST_FISCAL_YEAR=" + forecastFiscalYear);
		props = props.replace("CLASSIFIER=CLASSIFIER", "CLASSIFIER=" + classifier);
		props = props.replace("SCENARIO_NAME=${CLASSIFIER}_${BASE_DATE}_${FORECAST_FISCAL_YEAR}", 
							  "SCENARIO_NAME="+classifier+"_"+baseDate+"_"+forecastFiscalYear);
		
		for (Pair<String, String> rewrite : propertyRewrites) {
			props = props.replace(rewrite.getFirst(), rewrite.getSecond());
		}
		
		FileUtils.writeStringToFile(new File(testScenarioWorkDir, scenarioName + ".properties"), props);
		
		String scenarioLog4JNormalFilename = "log4j-normal.xml";
		String log4JNormalProps = FileUtils.readFileToString(new File(testScenarioWorkDir, scenarioLog4JNormalFilename));
		log4JNormalProps = log4JNormalProps.replace("${swac.work.dir}/scenarios/scenario", "${swac.work.dir}/scenarios/testScenario");
		FileUtils.writeStringToFile(new File(testScenarioWorkDir, scenarioLog4JNormalFilename), log4JNormalProps);
		
		String scenarioLog4JMonteCarloFilename = "log4j-monte-carlo.xml";
		String log4JMonteCarloProps = FileUtils.readFileToString(new File(testScenarioWorkDir, scenarioLog4JMonteCarloFilename));
		log4JMonteCarloProps = log4JMonteCarloProps.replace("${swac.work.dir}/scenarios/scenario", "${swac.work.dir}/scenarios/testScenario");
		FileUtils.writeStringToFile(new File(testScenarioWorkDir, scenarioLog4JMonteCarloFilename), log4JMonteCarloProps);
	}
}
