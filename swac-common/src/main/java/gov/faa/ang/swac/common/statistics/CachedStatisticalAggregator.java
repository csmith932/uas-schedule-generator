/**
 * Copyright "TBD", Metron Aviation & CSSI.  All rights reserved.
 *
 * This computer Software was developed with the sponsorship of the U.S. Government
 * under Contract No. DTFAWA-10-D-00033, which has a copyright license in accordance with AMS 3.5-13.(c)(1).
 */

package gov.faa.ang.swac.common.statistics;

import java.util.HashMap;
import java.util.Map;

/**
 * Class used to store and return results generated by a {@link StatisticalAggregator}.
 *
 * If a value is not in the cache, a null {@link Number} or Double.MIN_VALUE is returned.
 *
 */
public class CachedStatisticalAggregator extends StatisticalAggregator {
	private Map<Number, Number> percentileCache;
	private Map<Double, Double> halfWidthCache;

	long numberOfDataPoints;
	Number minimum;
	Number maximum;
	Double sum;
	Double mean;
	Double variance;
	Double standardDeviation;
	Double skewness;
	Double kurtosis;
	Number median;


	public CachedStatisticalAggregator() {
		percentileCache = new HashMap<Number, Number>();
		halfWidthCache = new HashMap<Double, Double>();
	}

	public void setNumberOfDataPoints(long numberOfDataPoints) {
		this.numberOfDataPoints = numberOfDataPoints;
	}

	@Override
	public long getNumberOfDataPoints() {
		return numberOfDataPoints;
	}

	public void setMinimum(Number minimum) {
		this.minimum = minimum;
	}

	@Override
	public Number getMinimum() {
		return minimum;
	}

	public void setMaximum(Number maximum) {
		this.maximum = maximum;
	}

	@Override
	public Number getMaximum() {
		return maximum;
	}

	public void setSum(double sum) {
		this.sum = sum;
	}

	@Override
	public double getSum() {
		if (sum == null)
			return Double.MIN_VALUE;
		return sum;
	}

	public void setMean(double mean) {
		this.mean = mean;
	}

	@Override
	public double getMean() {
		if (mean == null)
			return Double.MIN_VALUE;
		return mean;
	}

	public void setVariance(double variance) {
		this.variance = variance;
	}

	@Override
	public double getVariance() {
		if (variance == null)
			return Double.MIN_VALUE;
		return variance;
	}

	public void setStandardDeviation(double standardDeviation) {
		this.standardDeviation = standardDeviation;
	}

	@Override
	public double getStandardDeviation() {
		if (standardDeviation == null)
			return Double.MIN_VALUE;
		return standardDeviation;
	}

	public void setSkewness(double skewness) {
		this.skewness = skewness;
	}

	@Override
	public double getSkewness() {
		if (skewness == null)
			return Double.MIN_VALUE;
		return skewness;
	}

	public void setKurtosis(double kurtosis) {
		this.kurtosis = kurtosis;
	}

	@Override
	public double getKurtosis() {
		if (kurtosis == null)
			return Double.MIN_VALUE;
		return kurtosis;
	}

	public void setMedian(Number median) {
		this.median = median;
	}

	@Override
	public Number getMedian() {
		return median;
	}

	public void setPercentile(double fraction, double percentile) {
		percentileCache.put(fraction, percentile);
	}

	@Override
	public Number getPercentile(double fraction) {
		return percentileCache.get(fraction);
	}

	public void setHalfWidth(double confidenceLevel, double halfWidth) {
		halfWidthCache.put(confidenceLevel, halfWidth);
	}

	@Override
	public double getHalfWidth(double confidenceLevel) {
		Double retVal = halfWidthCache.get(confidenceLevel);
		if (retVal == null)
			return Double.MIN_VALUE;
		return retVal;
	}

	@Override
	public void addDataPoint(Number value) {
		// No-op.
	}

	@Override
	public void addWeightedDataPoint(Number value, double weight) {
		// No-op.
	}
}
